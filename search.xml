<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端面试常用题</title>
    <url>/2024/03/11/fileName/</url>
    <content><![CDATA[<h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><p>HTML的全称为超文本标记语言，是一种<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/5964436">标记语言</a>。它包括一系列标签，通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、<a href="https://baike.baidu.com/item/%E5%8A%A8%E7%94%BB/206564">动画</a>、声音、表格、链接等。 </p>
<h1 id="css"><a href="#css" class="headerlink" title="css"></a>css</h1><h2 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h2><p>通配符选择器* &lt; 标签选择器 &lt; 类 &lt; id &lt; 内联样式 &lt; !important</p>
<span id="more"></span>。

<p> 当涉及到后代选择器，有多个css选择同一个类标签时，优先级的考虑复杂了些许，标签使用哪个css可以通过计算权值来决定优先</p>
<p>  在同一个样式表中（同一个style或css文件）：</p>
<p>​     1.权值相同：就近原则</p>
<p>​     2.权值不同：选取权值最高的使用</p>
<p>  选择器的权值：</p>
<p>·    标签选择器：1</p>
<p>·    类选择器和伪类：10</p>
<p>·    ID选择器：100</p>
<p>·    通配符选择器：0</p>
<p>·    行内样式：1000</p>
<p>  权值计算的规则：不同种选择器数量x权值之和</p>
<p>  例如：</p>
<p>#one div.color h2{…}</p>
<p>​     ID：1x100</p>
<p>​     标签：2 x1</p>
<p>​     类：10</p>
<p>总权值：100 2 10&#x3D;112</p>
<h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><p>h1,h2,,,p,a,span,strong,div,iiii,main,header,footer,nav,aside,video,audio.</p>
<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>盒模型：每一个标签可以看做包含了几层结构的一个盒子，该盒子由内而外分别有几层结构：content、padding(内边距)、border(边框)、margin(外边距)。</p>
<p>宽高就是盒模型中content的那部分大小 </p>
<p>默认的盒模型设置了padding、border之后会往外扩展，导致标签的实际所占区域变大，如果不想让其变大，则可以修改默认的盒模型 ，使得padding、border往内挤压</p>
<p>&#x2F;* box-sizing用来设置盒模型。content-box就是所有标签默认的盒模型 *&#x2F;</p>
<p>box-sizing: content-box;</p>
<p>&#x2F;* border-box是让padding、border往内挤压的盒模型样式，因此标签的实际所占区域不会变大，但是内容(content)会被挤压 *&#x2F;</p>
<p>box-sizing: border-box;</p>
<h2 id="margin穿透"><a href="#margin穿透" class="headerlink" title="margin穿透"></a>margin穿透</h2><p>margin击穿，主要是因为：父元素的上边界不确定。子元素和父元素同时是块元素，然后子元素的顶端和父元素的顶端是对齐的，此时子元素一旦添加margin-top就会导致该margin击穿父元素，最终导致父元素下沉(感觉是该margin加到父元素身上，其实不是)</p>
<p>解决margin可以通过以下方案：</p>
<p>方案1、overflow: hidden; </p>
<p>方案2、padding-top: 1px; </p>
<p>方案3、 border-top: 1px solid blue; </p>
<p>方案4、不用margin,使用paading-top</p>
<p>&#x2F;* 普通布局时，元素的margin不会叠加，会采用较大的那一个 &#x2F; &#x2F; 浮动元素之间的margin会叠加 *&#x2F;</p>
<h2 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h2><p>“行”（row）  “列”（column）</p>
<p>\1. 项目只能是容器的顶层子元素，Grid 布局只对项目生效</p>
<p>\2. Grid 布局的属性分成两类。一类定义在容器上面，称为容器属性；另一类定义在项目上面，称为项目属性。</p>
<p>\3. 容器属性</p>
<p>3.1 display 属性</p>
<p>  display: grid指定一个容器采用网格布局。</p>
<p>  默认情况下，容器元素都是块级元素，但也可以设成行内元素。</p>
<p>  display: inline-grid;</p>
<p>注意：设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。</p>
<p>3.2 grid-template-columns 属性，grid-template-rows 属性</p>
<p>3.2.1 grid-template-columns属性定义每一列的列宽，grid-template-rows属性定义每一行的行高。</p>
<p>  grid-template-columns: 100px 100px 100px;</p>
<p>  grid-template-rows: 100px 100px 100px;</p>
<p>  上面代码指定了一个三行三列的网格，列宽和行高都是100px。</p>
<p>  也可以使用百分比。</p>
<p>  grid-template-columns: 33.33% 33.33% 33.33%;</p>
<p>3.2.2 repeat()</p>
<p> repeat()函数，设置重复值。</p>
<p> grid-template-columns: repeat(3, 33.33%);</p>
<p> repeat()接受两个参数，第一个参数是重复的次数（上例是3），第二个参数是所要重复的值。</p>
<p> repeat()重复某种模式也是可以的。</p>
<p> grid-template-columns: repeat(2, 100px 20px 80px)</p>
<p> 上面代码定义了6列，第一列和第四列的宽度为100px，第二列和第五列为20px，第三列和第六列为80px</p>
<p>3.2.3 auto-fill 关键字 (填充)</p>
<p> 单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用auto-fill关键字表示自动填充。</p>
<p>  grid-template-columns: repeat(auto-fill, 100px)</p>
<p>3.2.4 fr 关键字 (表示比例关系)</p>
<p> 如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍。</p>
<p> grid-template-columns: 1fr 1fr</p>
<p> 上面代码表示两个相同宽度的列。</p>
<p> fr可以与绝对长度的单位结合使用</p>
<p> grid-template-columns: 150px 1fr 2fr;</p>
<p> 上面代码表示，第一列的宽度为150像素，第二列的宽度是第三列的一半。</p>
<p>3.2.5 minmax()</p>
<p> minmax()函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p>
<p> grid-template-columns: 1fr 1fr minmax(100px, 1fr);</p>
<p> 上面代码中，minmax(100px, 1fr)表示列宽不小于100px，不大于1fr。</p>
<p>3.2.6  auto 关键字</p>
<p> auto关键字表示由浏览器自己决定长度。</p>
<p> grid-template-columns: 100px auto 100px;</p>
<p> 上面代码中，第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了min-width，且这个值大于最大宽度。</p>
<h2 id="元素隐藏的方式"><a href="#元素隐藏的方式" class="headerlink" title="元素隐藏的方式"></a>元素隐藏的方式</h2><p>opacity: 0; 设置透明度为0 占位置 </p>
<p>visibility: hidden; 设置是否可见，hidden隐藏（不可见），但是标签还在页面存在 </p>
<p>display:none后，元素的位置不在了</p>
<h1 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h1><h2 id="cookie的格式-获取和存储-清除"><a href="#cookie的格式-获取和存储-清除" class="headerlink" title="cookie的格式 获取和存储 清除"></a>cookie的格式 获取和存储 清除</h2><p>获取：document.cookie 返回所有的cookie,字符串形式，以分号加空格分割</p>
<p>export function getCookie(key: string) {</p>
<p> const reg &#x3D; new RegExp(“(^| )” + key + “&#x3D;([^;]*)(;|$)”);</p>
<p> const arr &#x3D; document.cookie.match(reg);</p>
<p> if (arr) return unescape(arr[2]);</p>
<p> else return “”;</p>
<p>}</p>
<p>存储：document.cookie &#x3D; key + “&#x3D;” + value</p>
<p>export function setCookie(key: string, value: string) {</p>
<p> document.cookie &#x3D; key + “&#x3D;” + value;</p>
<p>}</p>
<p>清除：（将过期时间设置为当前时间）</p>
<p>export function clearCookie(key:string){</p>
<p> document.cookie &#x3D; key+”&#x3D;0;expires&#x3D;” + new Date().toUTCString(); &#x2F;&#x2F;国际时间</p>
<p>}</p>
<h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><p>参考：<a href="https://blog.csdn.net/baidu_39009276/article/details/123798695">https://blog.csdn.net/baidu_39009276/article/details/123798695</a></p>
<p>iiii&#x2F;clip_image008.jpg)</p>
<h2 id="类和类继承"><a href="#类和类继承" class="headerlink" title="类和类继承"></a>类和类继承</h2><p>class 类是一种抽象的体现，用来表示具有相同特性的一类事物，是面向对象编程（oop）不可缺少的工具。</p>
<ol>
<li><p>定义一个类，类名建议首字母大写</p>
</li>
<li><p>class Animal{</p>
</li>
</ol>
<p>​    &#x2F;&#x2F; 类的构造函数，一般在类构造函数中定义类的属性。</p>
<p>​    constructor(name,age){</p>
<p>​      &#x2F;&#x2F; 定义类的属性</p>
<p>​      this.name &#x3D; name;</p>
<p>​      this.age &#x3D; age;</p>
<p>​    }</p>
<p>​    &#x2F;&#x2F; 方法  eat方法名，()形参，{}方法体</p>
<p>​    eat(food){</p>
<p>​      console.log(this.name + “喜欢吃” + food)</p>
<p>​    }</p>
<ol start="3">
<li>类继承 extends继承</li>
</ol>
<p>​    class Person extends Animal{</p>
<p>​     constructor(name, age, sex){</p>
<p>​       &#x2F;&#x2F; 去调用父类的构造函数，让父类帮子类进行初始化。</p>
<p>​       super(name, age);</p>
<p>​       &#x2F;&#x2F; 扩展的属性,</p>
<p>​       this.sex &#x3D; sex;</p>
<p>​     }</p>
<p>​      &#x2F;&#x2F; 扩展方法</p>
<p>​     sleep(){}</p>
<p>​     &#x2F;&#x2F; 扩展的方法如果和继承的方法名称相同时，会优先使用本类中的方法，这种做法叫“重写”，override</p>
<p>​     eat(){}</p>
<p>   }</p>
<h2 id="函数和方法的区别"><a href="#函数和方法的区别" class="headerlink" title="函数和方法的区别"></a>函数和方法的区别</h2><p>函数(function)：独立的function称之为函数</p>
<p>方法(method)：当一个函数属于某一个对象时，称这个函数是这个对象的方法</p>
<p>Var obj&#x3D;{</p>
<p>Foo:function(){}</p>
<p>}</p>
<p>obj.foo()</p>
<h2 id="链式作用域（作用域链）"><a href="#链式作用域（作用域链）" class="headerlink" title="链式作用域（作用域链）"></a>链式作用域（作用域链）</h2><p>在JS中访问一个变量时，会先从当前作用域中查找是否有变量的定义，如果有，直接使用即可。如果没有，会向上层作用域中查找此变量，上层作用域如果有，直接使用。如果没有继续向上层作用域中查找，一直找到全局作用域为止，这样查找变量的过程，就是链式作用域，或者称为作用域链。</p>
<h2 id="Js的内存管理"><a href="#Js的内存管理" class="headerlink" title="Js的内存管理"></a>Js的内存管理</h2><p>Js在定义变量时为我们分配内存</p>
<p>js对基本数据类型内存的分配会在执行时，直接在栈空间进行分配</p>
<p>js对于复杂数据类型内存的分配会在堆内存中开辟一块空间，并且将这块空间的指针返回值变量引用</p>
<h2 id="Js垃圾回收"><a href="#Js垃圾回收" class="headerlink" title="Js垃圾回收"></a>Js垃圾回收</h2><p>GC（垃圾回收）算法：</p>
<p><strong>①</strong>　<strong>引用计数</strong></p>
<p>当一个对象有一个引用指向它时，那么这个对象的引用就+1，当一个对象的引用为0时，这个对象就可以被销毁掉</p>
<p>这个算法有一个很大的弊端就是会产生循环引用</p>
<p><strong>②</strong>　<strong>标记清除（广泛，v8<strong><strong>引擎使用的GC</strong></strong>是在此基础上优化的）</strong></p>
<p>这个算法是设置一个根对象，垃圾回收器会定期从这个根开始，找所有从根开始有引用到的对象，对于那些没有引用到的对象，就认为是不可用的对象</p>
<p>这个算法可以很好的解决循环引用的问题</p>
<h2 id="深拷贝、浅拷贝"><a href="#深拷贝、浅拷贝" class="headerlink" title="深拷贝、浅拷贝"></a>深拷贝、浅拷贝</h2><p><strong>定义：</strong></p>
<p>浅拷贝就是拷贝一层,引用类型的深层次还是共享内存地址，对象的改变会反应到拷贝对象上。</p>
<p>深拷贝开辟一个新的栈，两个对象属性相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性，简单来说:就是完全独立的双胞胎,彼此之间不会影响</p>
<p><strong>浅拷贝方法：</strong></p>
<p>assign()说明有一个拷贝行为。是一个“浅拷贝”</p>
<p>map,filter,slice,reduce,concat,扩展运算符等数组中产生新数组的API基本上都是“浅拷贝”。只是部分深拷贝，只是对第一层进行了深拷贝，其他都是浅拷贝</p>
<p>Array.from和 Object.create是浅拷贝 </p>
<p><strong>深拷贝方法：</strong></p>
<p>1、_.cloneDeep()</p>
<p>2、JSON.stringify()</p>
<p>2.1、 JSON.stringify() 深拷贝弊端</p>
<p>2.2、JSON.stringify() 深拷贝的原理</p>
<p>2.3、JSON.stringify() 深拷贝产生弊端缘由</p>
<p><strong>3、手写递归方法</strong></p>
<p>3.1、手写递归弊端</p>
<p>​                      </p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是两部分组成的：函数+可以访问的自由变量</p>
<p>function foo(){</p>
<p> var n&#x3D;’foo’ &#x2F;&#x2F;自由变量</p>
<p> function bar(){</p>
<p>  console.log(‘bar’,n) &#x2F;&#x2F;闭包</p>
<p>}</p>
<p>return bar</p>
<p>}</p>
<p>var fn&#x3D;foo()  &#x2F;&#x2F;foo()执行完后理应出栈销毁，但bar仍能访问n变量（bar访问上层作用域，根据垃圾回收机制，不会被销毁），该销毁的没有销毁（js</p>
<p>内部实现的）就形成了闭包</p>
<p>fn()</p>
<p>闭包跟函数最大的区别在于当捕捉闭包的时候，它的自由变量会在捕捉时被确定，这样即使脱离了上下文，它也能照常运行</p>
<p><strong>总结：js****闭包的含义</strong></p>
<p>u 一个普通的函数，如果他可以访问外层作用域的自由变量。那么这个函数就是一个闭包</p>
<p>u 从广义的角度来说，js中的函数都是闭包</p>
<p>u 从狭义的角度来说，js中一个函数，如果访问了外层作用域的变量，那么它是一个闭包</p>
<p>闭包只使用一次，或使用后不再使用，闭包该被销毁的没有被销毁，就会造成内存泄漏</p>
<p>如何解决内存泄漏：foo&#x3D;null; &#x2F;&#x2F;使函数指向空地址，GC垃圾就会回收</p>
<h2 id="let-const区别"><a href="#let-const区别" class="headerlink" title="let const区别"></a>let const区别</h2><p><strong>1、相同点：</strong></p>
<p>①　只在声明所在的块级<a href="https://so.csdn.net/so/search?q=%E4%BD%9C%E7%94%A8%E5%9F%9F&spm=1001.2101.3001.7020">作用域</a>内有效。</p>
<p>②　不提升，同时存在暂时性死区，只能在声明的位置后面使用。</p>
<p>③　不可重复声明。</p>
<p><strong>2、不同点：</strong></p>
<p>①　let声明的变量可以改变，值和类型都可以改变；const声明的常量不可以改变。</p>
<p>②　const一旦声明，就必须立即初始化，不能以后再赋值。</p>
<h2 id="js中关于const在for-in或者for-of中的使用"><a href="#js中关于const在for-in或者for-of中的使用" class="headerlink" title="js中关于const在for in或者for of中的使用"></a>js中关于const在for in或者for of中的使用</h2><h2 id="foreach和map的区别"><a href="#foreach和map的区别" class="headerlink" title="foreach和map的区别"></a>foreach和map的区别</h2><p><strong>1相同点</strong></p>
<p>(1)都是循环遍历数组中的每一项。</p>
<p>(2)每次执行匿名函数都支持三个参数，参数分别为item(当前每一项)，index(索引值)，arr(原数组)。</p>
<p>(3)匿名函数中的this都是指向window。</p>
<p>(4)只能遍历数组。</p>
<p><strong>2不同点：</strong></p>
<p>(1)map()会分配内存空间存储新数组并返回，forEach()不会返回数据。</p>
<p>(2)forEach()允许callback更改原始数组的元素，注意内部不能使用break和continue。map()返回新的数组。</p>
<p>正常终止for循环我们可以使用break关键字来实现，而在forEach循环中是不能使用break和continue这两个关键字的，为什么呢？</p>
<p>因为这两个关键字要在循环中使用，而forEach中所执行的是callback，callback是个函数所以不能使用。</p>
<p>那在forEach中应该怎么样终止循环呢？使用return？</p>
<p>使用 return 的话，只能跳出本次循环执行下一次循环，并不会终止forEach循环。</p>
<p>可以使用 抛出错误 的方式来真正的终止forEach循环</p>
<h2 id="break-continue-return的区别"><a href="#break-continue-return的区别" class="headerlink" title="break continue return的区别"></a>break continue return的区别</h2><p><strong>1break</strong>：执行break操作，跳出所在的当前整个循环，到外层代码继续执行。（需要在break后紧跟一个标签，这个标签用于标识哪个外层循环。switch case 语句，break不仅可以结束其所在的循环，还可结束其外层循环，但一次只能结束一种循环。）</p>
<p><strong>2continue</strong>：执行continue操作，跳出本次循环，从下一个迭代继续运行循环，内层循环执行完毕，外层代码继续运行。（if判断不满足当前条件，则continue，continue结束的是本次循环，将接着开始下一次循环。在continue后不需要加参数）</p>
<p><strong>3return</strong>：执行return操作，直接返回函数，所有该函数体内的代码（包括循环体）都不会再执行。（return同时结束其所在的循环和其外层循环。在return后需要紧跟一个返回值）</p>
<h2 id="for…in…和for…of…区别"><a href="#for…in…和for…of…区别" class="headerlink" title="for…in…和for…of…区别"></a>for…in…和for…of…区别</h2><p>1、for…in…一般用来循环对象，但也可以循环数组，字符串。</p>
<p>2、for…of…一般用来循环数组，但也可以循环对象，字符串，注意：需要特殊处理。</p>
<p>3、for…in…是ES5标准，for…of…是ES6标准。</p>
<p>4、for…in…循环数组时key是索引，for…of…循环数组时key是值。</p>
<p>5、for…in…可以循环没有迭代器的对象，for…of…天生可以循环带迭代器的对象。数组天生带迭代器。对象不带迭代器，想获取对象的的迭代器，需要通过entries(),keys(),values()。</p>
<h2 id="js高阶函数"><a href="#js高阶函数" class="headerlink" title="js高阶函数"></a>js高阶函数</h2><p><strong>1、reduce</strong> <strong>累加</strong> <strong>返回新数组</strong> <strong>不会影响原数组</strong></p>
<p>对数组中的每一个元素执行一个由你提供的reducer函数（升序执行），将其结果汇总为单个返回值</p>
<p>arr.reduce(function (accumulator,currentValue,currentIndex,arr),initilavlue)</p>
<p>accumulator：必需，累计器</p>
<p>currentValue：必需，当前元素</p>
<p>currentIndex：可选，当前元素的索引</p>
<p>arr：可选，要处理的数组</p>
<p>initilavlue：可选，传递给函数的初始值，相当于Accumulator的初始值，默认为0</p>
<p>上一次的输出会作为下一次的输入</p>
<p><strong>2、findIndex</strong> <strong>查询</strong></p>
<p>findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回-1。 var arr5 &#x3D; [2, 4, “11”, 8, 11, 13]; </p>
<p>var index5 &#x3D; arr5.findIndex(function (v, i, arr) { return v &gt; 10; }) </p>
<p>console.log(index5);</p>
<p><strong>3、find</strong> <strong>查询</strong></p>
<p>find方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p>
<p>var arr4 &#x3D; [2001, 2000, 2002, 2003, 2004]; </p>
<p>var result4 &#x3D; arr4.find(function (v, i, arr) { return (v % 4 &#x3D;&#x3D;&#x3D; 0 &amp;&amp; v % 100 !&#x3D;&#x3D; 0) || (v % 400 &#x3D;&#x3D;&#x3D; 0); });</p>
<p>console.log(result4);</p>
<p><strong>4、filter</strong> <strong>查询</strong> <strong>返回新数组，不影响原数组</strong></p>
<p>filter过滤原数组，筛选出来满足某个业务逻辑条件的新数组。</p>
<p>var arr3 &#x3D; [‘a’, ‘hello’, ‘abca’, ‘an’, ‘bca’]; </p>
<p>var newArr3 &#x3D; arr3.filter(function (v, i, arr) { &#x2F;&#x2F; str.indexOf()查找某个字符在字符串索引，找到返回索引，找不到返回-1。 </p>
<p>return v.indexOf(‘a’) !&#x3D;&#x3D; -1; }); </p>
<p>console.log(newArr3);</p>
<p><strong>5、every</strong></p>
<p>every测试一个数组内的所有元素是否都能通过某个指定函数的测试。所有的都通过返回true，否则返回false</p>
<p><strong>6、some</strong></p>
<p>some测试数组中是不是至少有1个元素通过了被提供的函数测试。</p>
<p>var arr1 &#x3D; [1, 2, 4, 6]; </p>
<p>var result1 &#x3D; arr1.some(function (v, i, arr) { return v % 2 &#x3D;&#x3D; 0; });</p>
<p>console.log(result1);</p>
<p><strong>7、forEach</strong></p>
<p>forEach()专门用来循环数组，是数组特有的API。但注意内部不能使用breack和continue。</p>
<p>arr.forEach(function (v, i, arr) {</p>
<p> if (i &#x3D;&#x3D;&#x3D; 2) {}</p>
<p> else {</p>
<p>  console.log(v);</p>
<p>  }</p>
<p> })</p>
<p><strong>8、sort</strong> <strong>改变原数组</strong></p>
<p>js的数组自带一个sort方法，可以对简单数组进行排序</p>
<p>var arr&#x3D;[3,1,6,19,12,7];</p>
<p> var res&#x3D;arr.sort(function(a,b){ </p>
<p>return a-b;&#x2F;&#x2F;升序</p>
<p>return b-a;&#x2F;&#x2F;降序  </p>
<p>})</p>
<p>&#x2F;&#x2F; 从大到小：</p>
<p>arr.reverse(); console.log(arr,res);</p>
<p><strong>9、map</strong> <strong>返回新数组，不会影响原数组</strong></p>
<p>map()映射：把数组中的元素经过一系列业务逻辑处理，最后得到新数组的过程。</p>
<p>var arr1 &#x3D; [‘a’, ‘b’, ‘c’]; </p>
<p>var newArr1 &#x3D; arr1.map(function (v, i, arr) { return v + (i + 1); }); </p>
<p>console.log(newArr1);</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/11/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>。

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>categories</category>
      </categories>
  </entry>
  <entry>
    <title>关于md代码书写---Typora</title>
    <url>/2024/03/11/postName/</url>
    <content><![CDATA[<h2 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h2><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><p>标题一共有六级,是用“#”实现的，标题前面加一个“#”，代表一级标题；依次类推，标题前面加六个“#”代表六级标题；一共有六级标题，编辑各种文档完全够用,左侧的目录会根据输入的标题自动生成响应的层级。</p>
<span id="more"></span>。

<p><img src="https://www.typora.net/wp-content/uploads/2019/10/20191024150147-82804.gif"></img></p>
<h3 id="2-强调"><a href="#2-强调" class="headerlink" title="2.强调"></a>2.<strong>强调</strong></h3><p>在要<strong>强调</strong>内容前后分别加两个“*”号。</p>
<p><img src="https://www.typora.net/wp-content/uploads/2019/10/20191024150148-9b57a.gif"></img></p>
<h3 id="3-斜体"><a href="#3-斜体" class="headerlink" title="3.斜体"></a>3.<em>斜体</em></h3><p>前后分别加一个“*”号。</p>
<p><img src="https://www.typora.net/wp-content/uploads/2019/10/20191024150148-20d37.gif"></img></p>
<h3 id="4-删除线"><a href="#4-删除线" class="headerlink" title="4.删除线"></a>4.<del>删除线</del></h3><p>内容前后分别加上<strong>两个</strong>“~”号。</p>
<p><img src="https://www.typora.net/wp-content/uploads/2019/10/20191024150149-3aed3.gif"></img></p>
<hr>
<h2 id="list列表处理"><a href="#list列表处理" class="headerlink" title="list列表处理"></a>list列表处理</h2><h3 id="1-有序列表"><a href="#1-有序列表" class="headerlink" title="1.有序列表"></a>1.有序列表</h3><p>输入数字“1”+“.”+空格 ， 自动开始有序列表。</p>
<p><img src="https://www.typora.net/wp-content/uploads/2019/10/20191024150150-27a92.gif"></img></p>
<h3 id="2-无序列表"><a href="#2-无序列表" class="headerlink" title="2.无序列表"></a>2.无序列表</h3><p>输入“+”或“-”或“*”+空格，自动开始无序列表。</p>
<p><img src="https://www.typora.net/wp-content/uploads/2019/10/20191024150150-de191.gif"></img></p>
<h3 id="3-table表格"><a href="#3-table表格" class="headerlink" title="3.table表格"></a>3.table表格</h3><p>Ctrl+T,在弹出的对话框中选择行列数，自动生成列表。 还可以很方便地对表格进行编辑。</p>
<p><img src="https://www.typora.net/wp-content/uploads/2019/10/20191024150151-beafb.gif"></img></p>
<p>当然还有另外一种建立表格的方式用’|’分隔然后回车创建表格,使用ctrl+回车新添一行</p>
<p><img src="https://www.typora.net/wp-content/uploads/2019/10/20191024150152-8fe54.gif"></img></p>
<h3 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h3><p>输入三个或三个以上“-”（“*”），再按回车键，即出现一条分割线。</p>
<p><img src="https://www.typora.net/wp-content/uploads/2019/10/20191024150153-b207d.gif" alt="win上好用的Markdown编辑工具Typora教程"></p>
<h3 id="5-插入"><a href="#5-插入" class="headerlink" title="5.插入"></a>5.插入</h3><p>插入本地图片：直接把图片拖入即可； 插入网络图片：<img src="/%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5" alt="图片标题">。</p>
<p><img src="https://www.typora.net/wp-content/uploads/2019/10/20191024150153-3a19e.gif" alt="win上好用的Markdown编辑工具Typora教程"></p>
<h3 id="6-链接"><a href="#6-链接" class="headerlink" title="6.链接"></a>6.链接</h3><p>[链接提示]+(链接地址)。</p>
<p><img src="https://www.typora.net/wp-content/uploads/2019/10/20191024150155-b1d2d.gif" alt="win上好用的Markdown编辑工具Typora教程"></p>
<h3 id="7-数学公式"><a href="#7-数学公式" class="headerlink" title="7.数学公式"></a>7.数学公式</h3><p>“$$”+回车。</p>
<p><img src="https://www.typora.net/wp-content/uploads/2019/10/20191024150156-5068f.gif" alt="win上好用的Markdown编辑工具Typora教程"></p>
<h3 id="8-代码"><a href="#8-代码" class="headerlink" title="8.代码"></a>8.代码</h3><p>行内代码：代码的两端各加一个“&#96;”号，（在Tab键上面，英文输入法）。 代码块：输入三个“~”，按回车键，即可选择编程语言。</p>
<p><img src="https://www.typora.net/wp-content/uploads/2019/10/20191024150156-28824.gif" alt="win上好用的Markdown编辑工具Typora教程"></p>
<p><img src="https://www.typora.net/wp-content/uploads/2019/10/20191024150157-a4ffa.gif" alt="win上好用的Markdown编辑工具Typora教程"></p>
<hr>
<h2 id="导出多种格式文件"><a href="#导出多种格式文件" class="headerlink" title="导出多种格式文件"></a>导出多种格式文件</h2><p>typora 的文件导入&#x2F;导出功能使用 Pandoc 把 Markdown 源码转换成不同的文件格式，所以我们如果想使用文件导入&#x2F;导出功能，必须先安装 Pandoc。</p>
<p><img src="https://www.typora.net/wp-content/uploads/2019/10/20191024150158-4721a.gif" alt="win上好用的Markdown编辑工具Typora教程"></p>
<hr>
<hr>
<p>转载于<a href="https://www.typora.net/527.html">Typora使用教程</a></p>
]]></content>
  </entry>
  <entry>
    <title>interview</title>
    <url>/2024/06/10/interview/</url>
    <content><![CDATA[<h2 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h2><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><p>标题一共有六级,是用“#”实现的，标题前面加一个“#”，代表一级标题；依次类推，标题前面加六个“#”代表六级标题；一共有六级标题，编辑各种文档完全够用,左侧的目录会根据输入的标题自动生成响应的层级。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
</search>
